schema {
  query: Query
  mutation: Mutation
}

type Mutation {
  ping: String!
  changeUsername(username: String!): Boolean!
  registerUser(username: String): RegisterUserResponse!
}

type Query {
  ping: String!
  currentUser: User! @authorize
}

type RegisterUserResponse {
  token: String!
  id: UUID!
  userName: String!
}

type User {
  id: UUID!
  userName: String!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
