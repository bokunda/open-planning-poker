schema {
  query: Query
  mutation: Mutation
}

interface Error {
  message: String!
}

type ApplicationError implements Error {
  code: String!
  message: String!
}

type ChangeUsernamePayload {
  boolean: Boolean
  errors: [ChangeUsernameError!]
}

type Mutation {
  ping: PingPayload! @cost(weight: "10")
  changeUsername(input: ChangeUsernameInput!): ChangeUsernamePayload! @cost(weight: "10")
  registerUser(input: RegisterUserInput!): RegisterUserPayload! @cost(weight: "10")
}

type PingPayload {
  string: String
}

type Query {
  ping: String! @cost(weight: "10")
  currentUser: CurrentUserResult! @authorize @cost(weight: "10")
}

type RegisterUserPayload {
  registerUserResponse: RegisterUserResponse
  errors: [RegisterUserError!]
}

type RegisterUserResponse {
  token: String!
  id: UUID!
  userName: String!
}

type User {
  id: UUID!
  userName: String!
}

union ChangeUsernameError = ApplicationError

union CurrentUserResult = User | ApplicationError

union RegisterUserError = ApplicationError

input ChangeUsernameInput {
  username: String!
}

input RegisterUserInput {
  username: String
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

"The authorize directive."
directive @authorize("The name of the authorization policy that determines access to the annotated resource." policy: String "Roles that are allowed to access the annotated resource." roles: [String!] "Defines when when the authorize directive shall be applied.By default the authorize directives are applied during the validation phase." apply: ApplyPolicy! = BEFORE_RESOLVER) repeatable on OBJECT | FIELD_DEFINITION

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")