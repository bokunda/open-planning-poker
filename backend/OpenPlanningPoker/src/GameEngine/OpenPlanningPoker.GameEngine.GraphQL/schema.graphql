schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

interface Error {
  message: String!
}

type ApiCollectionOfGamePlayer {
  items: [GamePlayer!]!
  totalCount: Int!
}

type ApiCollectionOfTicket {
  items: [Ticket!]!
  totalCount: Int!
}

type ApiCollectionOfVote {
  items: [Vote!]!
  totalCount: Int!
}

type ApplicationError implements Error {
  code: String!
  message: String!
}

type CreateGamePayload {
  game: Game
  errors: [CreateGameError!]
}

type CreateSettingsPayload {
  settings: Settings
  errors: [CreateSettingsError!]
}

type CreateTicketPayload {
  ticket: Ticket
  errors: [CreateTicketError!]
}

type CreateVotePayload {
  vote: Vote
  errors: [CreateVoteError!]
}

type DeleteTicketPayload {
  ticket: Ticket
  errors: [DeleteTicketError!]
}

type Game {
  id: UUID!
  name: String!
  description: String!
}

type GamePlayer {
  name: String @cost(weight: "10")
  id: UUID!
}

type Info {
  version: String!
  author: String!
  contact: String!
}

type JoinGamePayload {
  boolean: Boolean
  errors: [JoinGameError!]
}

type LeaveGamePayload {
  boolean: Boolean
  errors: [LeaveGameError!]
}

"Base Game Engine mutation."
type Mutation {
  "Join Game"
  joinGame(input: JoinGameInput!): JoinGamePayload! @cost(weight: "10")
  "Leave a Game"
  leaveGame(input: LeaveGameInput!): LeaveGamePayload! @cost(weight: "10")
  "Creates a game, returns game details."
  createGame(input: CreateGameInput!): CreateGamePayload! @cost(weight: "10")
  "Dummy health-check mutation."
  ping: PingPayload! @cost(weight: "10")
  "Creates Game Settings."
  createSettings(input: CreateSettingsInput!): CreateSettingsPayload! @cost(weight: "10")
  "Updates Game Settings."
  updateSettings(input: UpdateSettingsInput!): UpdateSettingsPayload! @cost(weight: "10")
  "Creates a ticket for given game."
  createTicket(input: CreateTicketInput!): CreateTicketPayload! @cost(weight: "10")
  "Updates a ticket for given game."
  updateTicket(input: UpdateTicketInput!): UpdateTicketPayload! @cost(weight: "10")
  "Deletes a ticket for given game."
  deleteTicket(input: DeleteTicketInput!): DeleteTicketPayload! @cost(weight: "10")
  "Creates a vote."
  createVote(input: CreateVoteInput!): CreateVotePayload! @cost(weight: "10")
  "Updates a vote."
  updateVote(input: UpdateVoteInput!): UpdateVotePayload! @cost(weight: "10")
}

type PingPayload {
  string: String
}

"Base Game Engine query."
type Query {
  "Returns game with participants"
  gamePlayers(gameId: UUID!): GamePlayersResult! @cost(weight: "10")
  "Returns Game details."
  game(id: UUID!): GameResult! @cost(weight: "10")
  "Returns an info about the Game Engine service."
  info: InfoResult! @cost(weight: "10")
  "Dummy health-check query."
  ping: String! @cost(weight: "10")
  "Gets Game Settings."
  settings(gameId: UUID!): SettingsResult! @cost(weight: "10")
  "Gets a ticket by id."
  ticket(id: UUID!): TicketResult! @cost(weight: "10")
  "Gets a list of tickets by gameId."
  tickets(gameId: UUID!): TicketsResult! @cost(weight: "10")
  "Gets votes by ticketId."
  votes(ticketId: UUID!): VotesResult! @cost(weight: "10")
}

type Settings {
  id: UUID!
  gameId: UUID!
  votingTime: Int!
  isBreakAllowed: Boolean!
}

type Subscription {
  onPlayerJoined: UUID!
  onPlayerLeave: UUID!
}

type Ticket {
  id: UUID!
  gameId: UUID!
  name: String!
  description: String!
}

type UpdateSettingsPayload {
  settings: Settings
  errors: [UpdateSettingsError!]
}

type UpdateTicketPayload {
  ticket: Ticket
  errors: [UpdateTicketError!]
}

type UpdateVotePayload {
  vote: Vote
  errors: [UpdateVoteError!]
}

type Vote {
  id: UUID!
  gameId: UUID!
  playerId: UUID!
  value: Int!
}

union CreateGameError = ApplicationError

union CreateSettingsError = ApplicationError

union CreateTicketError = ApplicationError

union CreateVoteError = ApplicationError

union DeleteTicketError = ApplicationError

union GamePlayersResult = ApiCollectionOfGamePlayer | ApplicationError

union GameResult = Game | ApplicationError

union InfoResult = Info | ApplicationError

union JoinGameError = ApplicationError

union LeaveGameError = ApplicationError

union SettingsResult = Settings | ApplicationError

union TicketResult = Ticket | ApplicationError

union TicketsResult = ApiCollectionOfTicket | ApplicationError

union UpdateSettingsError = ApplicationError

union UpdateTicketError = ApplicationError

union UpdateVoteError = ApplicationError

union VotesResult = ApiCollectionOfVote | ApplicationError

input CreateGameInput {
  name: String!
  description: String!
}

input CreateSettingsInput {
  gameId: UUID!
  votingTime: Int!
  isBreakAllowed: Boolean!
}

input CreateTicketInput {
  gameId: UUID!
  name: String!
  description: String!
}

input CreateVoteInput {
  ticketId: UUID!
  value: Int!
}

input DeleteTicketInput {
  id: UUID!
}

input JoinGameInput {
  gameId: UUID!
}

input LeaveGameInput {
  gameId: UUID!
}

input UpdateSettingsInput {
  id: UUID!
  gameId: UUID!
  votingTime: Int!
  isBreakAllowed: Boolean!
}

input UpdateTicketInput {
  id: UUID!
  name: String!
  description: String!
}

input UpdateVoteInput {
  id: UUID!
  value: Int!
}

"Defines when a policy shall be executed."
enum ApplyPolicy {
  "Before the resolver was executed."
  BEFORE_RESOLVER
  "After the resolver was executed."
  AFTER_RESOLVER
  "The policy is applied in the validation step before the execution."
  VALIDATION
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")